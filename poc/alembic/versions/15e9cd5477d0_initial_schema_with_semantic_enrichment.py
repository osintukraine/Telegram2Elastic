"""Initial schema with semantic enrichment

Revision ID: 15e9cd5477d0
Revises: 
Create Date: 2025-10-25 08:41:00.086532

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '15e9cd5477d0'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable PostgreSQL extensions
    op.execute('CREATE EXTENSION IF NOT EXISTS pg_trgm')

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('archives',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('channel_id', sa.BigInteger(), nullable=False),
    sa.Column('channel_username', sa.String(length=255), nullable=True),
    sa.Column('channel_title', sa.String(length=500), nullable=False),
    sa.Column('channel_description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_message_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_sync_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_messages', sa.Integer(), nullable=False),
    sa.Column('total_media_files', sa.Integer(), nullable=False),
    sa.Column('total_high_value_messages', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('channel_id')
    )
    op.create_index(op.f('ix_archives_channel_username'), 'archives', ['channel_username'], unique=False)
    op.create_table('event_clusters',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('cluster_name', sa.String(length=500), nullable=False),
    sa.Column('cluster_type', sa.String(length=100), nullable=True, comment='military_operation, incident, announcement, etc.'),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.Column('avg_osint_score', sa.Float(), nullable=True),
    sa.Column('message_ids', sa.ARRAY(sa.BigInteger()), nullable=False, comment='Array of message IDs in this cluster'),
    sa.Column('keywords', sa.ARRAY(sa.String()), nullable=True, comment='Key terms associated with this cluster'),
    sa.Column('locations', sa.ARRAY(sa.String()), nullable=True, comment='Locations mentioned in cluster'),
    sa.Column('entities', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Aggregated entities from cluster messages'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_event_clusters_dates', 'event_clusters', ['start_date', 'end_date'], unique=False)
    op.create_index('ix_event_clusters_entities_gin', 'event_clusters', ['entities'], unique=False, postgresql_using='gin')
    op.create_table('messages',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('archive_id', sa.BigInteger(), nullable=False),
    sa.Column('message_id', sa.BigInteger(), nullable=False),
    sa.Column('telegram_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('raw_text', sa.Text(), nullable=True),
    sa.Column('has_media', sa.Boolean(), nullable=False),
    sa.Column('media_type', sa.String(length=50), nullable=True),
    sa.Column('is_forwarded', sa.Boolean(), nullable=False),
    sa.Column('forward_from_channel_id', sa.BigInteger(), nullable=True),
    sa.Column('forward_from_message_id', sa.BigInteger(), nullable=True),
    sa.Column('is_spam', sa.Boolean(), nullable=False),
    sa.Column('spam_confidence', sa.Float(), nullable=True),
    sa.Column('osint_value_score', sa.Float(), nullable=True),
    sa.Column('entities', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Named entities: {persons: [...], locations: [...], orgs: [...], military_units: [...]}'),
    sa.Column('geolocations', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Extracted coordinates: [{lat: ..., lon: ..., confidence: ..., text: ...}]'),
    sa.Column('topics', sa.ARRAY(sa.String()), nullable=True, comment='Topic classifications'),
    sa.Column('sentiment', sa.String(length=50), nullable=True, comment='Sentiment: positive, negative, neutral'),
    sa.Column('views_count', sa.Integer(), nullable=True),
    sa.Column('forwards_count', sa.Integer(), nullable=True),
    sa.Column('replies_count', sa.Integer(), nullable=True),
    sa.Column('reactions_count', sa.Integer(), nullable=True),
    sa.Column('reply_reach_er', sa.Float(), nullable=True, comment='Reply reach engagement rate'),
    sa.Column('reply_impressions_er', sa.Float(), nullable=True, comment='Reply impressions engagement rate'),
    sa.Column('forwards_reach_er', sa.Float(), nullable=True, comment='Forwards reach engagement rate'),
    sa.Column('forwards_impressions_er', sa.Float(), nullable=True, comment='Forwards impressions engagement rate'),
    sa.Column('reactions_reach_er', sa.Float(), nullable=True, comment='Reactions reach engagement rate'),
    sa.Column('reactions_impressions_er', sa.Float(), nullable=True, comment='Reactions impressions engagement rate'),
    sa.Column('reactions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Reaction counts by emoji type'),
    sa.Column('enrichment_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional enrichment data, processing timestamps, model versions, etc.'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['archive_id'], ['archives.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_messages_archive_date', 'messages', ['archive_id', 'telegram_date'], unique=False)
    op.create_index(op.f('ix_messages_archive_id'), 'messages', ['archive_id'], unique=False)
    op.create_index('ix_messages_enrichment_gin', 'messages', ['enrichment_metadata'], unique=False, postgresql_using='gin')
    op.create_index('ix_messages_entities_gin', 'messages', ['entities'], unique=False, postgresql_using='gin')
    op.create_index('ix_messages_geolocations_gin', 'messages', ['geolocations'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_messages_is_spam'), 'messages', ['is_spam'], unique=False)
    op.create_index('ix_messages_osint_filter', 'messages', ['archive_id', 'osint_value_score', 'is_spam'], unique=False)
    op.create_index(op.f('ix_messages_osint_value_score'), 'messages', ['osint_value_score'], unique=False)
    op.create_index('ix_messages_reactions_gin', 'messages', ['reactions'], unique=False, postgresql_using='gin')
    op.create_index('ix_messages_text_search', 'messages', ['text'], unique=False, postgresql_using='gin', postgresql_ops={'text': 'gin_trgm_ops'})
    op.create_table('entities',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('message_id', sa.BigInteger(), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False, comment='PERSON, ORG, GPE, LOC, MILITARY_UNIT, etc.'),
    sa.Column('entity_text', sa.String(length=500), nullable=False),
    sa.Column('normalized_text', sa.String(length=500), nullable=False, comment='Lowercase, stripped version for matching'),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('context', sa.Text(), nullable=True, comment='Surrounding text for context'),
    sa.Column('position_start', sa.Integer(), nullable=True),
    sa.Column('position_end', sa.Integer(), nullable=True),
    sa.Column('entity_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional entity metadata (source, wiki_url, etc.)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_entities_entity_text'), 'entities', ['entity_text'], unique=False)
    op.create_index(op.f('ix_entities_entity_type'), 'entities', ['entity_type'], unique=False)
    op.create_index(op.f('ix_entities_message_id'), 'entities', ['message_id'], unique=False)
    op.create_index('ix_entities_metadata_gin', 'entities', ['entity_metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_entities_normalized_text'), 'entities', ['normalized_text'], unique=False)
    op.create_index('ix_entities_type_text', 'entities', ['entity_type', 'normalized_text'], unique=False)
    op.create_table('media_files',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('message_id', sa.BigInteger(), nullable=False),
    sa.Column('sha256', sa.String(length=64), nullable=False),
    sa.Column('storage_key', sa.String(length=255), nullable=False, comment='S3/MinIO object key'),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.BigInteger(), nullable=False),
    sa.Column('file_name', sa.String(length=500), nullable=True),
    sa.Column('media_type', sa.String(length=50), nullable=False, comment='photo, video, document, voice, audio, etc.'),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True, comment='Duration in seconds for video/audio'),
    sa.Column('bucket_name', sa.String(length=255), nullable=False),
    sa.Column('upload_status', sa.String(length=50), nullable=False, comment='pending, uploaded, failed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('storage_key')
    )
    op.create_index(op.f('ix_media_files_message_id'), 'media_files', ['message_id'], unique=False)
    op.create_index(op.f('ix_media_files_sha256'), 'media_files', ['sha256'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_media_files_sha256'), table_name='media_files')
    op.drop_index(op.f('ix_media_files_message_id'), table_name='media_files')
    op.drop_table('media_files')
    op.drop_index('ix_entities_type_text', table_name='entities')
    op.drop_index(op.f('ix_entities_normalized_text'), table_name='entities')
    op.drop_index('ix_entities_metadata_gin', table_name='entities', postgresql_using='gin')
    op.drop_index(op.f('ix_entities_message_id'), table_name='entities')
    op.drop_index(op.f('ix_entities_entity_type'), table_name='entities')
    op.drop_index(op.f('ix_entities_entity_text'), table_name='entities')
    op.drop_table('entities')
    op.drop_index('ix_messages_text_search', table_name='messages', postgresql_using='gin', postgresql_ops={'text': 'gin_trgm_ops'})
    op.drop_index('ix_messages_reactions_gin', table_name='messages', postgresql_using='gin')
    op.drop_index(op.f('ix_messages_osint_value_score'), table_name='messages')
    op.drop_index('ix_messages_osint_filter', table_name='messages')
    op.drop_index(op.f('ix_messages_is_spam'), table_name='messages')
    op.drop_index('ix_messages_geolocations_gin', table_name='messages', postgresql_using='gin')
    op.drop_index('ix_messages_entities_gin', table_name='messages', postgresql_using='gin')
    op.drop_index('ix_messages_enrichment_gin', table_name='messages', postgresql_using='gin')
    op.drop_index(op.f('ix_messages_archive_id'), table_name='messages')
    op.drop_index('ix_messages_archive_date', table_name='messages')
    op.drop_table('messages')
    op.drop_index('ix_event_clusters_entities_gin', table_name='event_clusters', postgresql_using='gin')
    op.drop_index('ix_event_clusters_dates', table_name='event_clusters')
    op.drop_table('event_clusters')
    op.drop_index(op.f('ix_archives_channel_username'), table_name='archives')
    op.drop_table('archives')
    # ### end Alembic commands ###
